enum ExerciseType {
  QUIZ,
  PUZZLES,
  TRUE_FALSE,
}

class Exercise {
  String id; // Generated by Firestore, not for serialization
  String level;
  ExerciseType? type;
  String? question; // For QUIZ and possibly TRUE_FALSE
  List<String>? options; // For QUIZ
  int? correctOptionIndex; // For QUIZ
  int? userSelectedOptionIndex; // Local use, not for serialization
  String? statement; // For TRUE_FALSE, could be the same as question
  bool? isTrue; // For TRUE_FALSE
  List<String>? sentenceParts; // For PUZZLES
  List<int>? correctOrder; // For PUZZLES

  Exercise({
    this.id = '',
    required this.level,
    this.type,
    this.question,
    this.options,
    this.correctOptionIndex,
    this.userSelectedOptionIndex,
    this.statement,
    this.isTrue,
    this.sentenceParts,
    this.correctOrder,
  });

  Map<String, dynamic> toMap() {
    return {
      'level': level,
      'type': type?.index, // Serialize enum as its index
      'question': question,
      'options': options ?? [], // Provide default value for null options
      'correctOptionIndex': correctOptionIndex,
      // 'userSelectedOptionIndex' is not included as it's for local use and not stored in Firestore
      'statement': statement,
      'isTrue': isTrue,
      'sentenceParts': sentenceParts ?? [], // Provide default value for null sentenceParts
      'correctOrder': correctOrder ?? [], // Provide default value for null correctOrder
    };
  }

  // Create a factory constructor to generate an instance from Firestore data
  factory Exercise.fromFirestore(Map<String, dynamic> data, String documentId) {
    return Exercise(
      id: documentId,
      level: data['level'] as String,
      type: ExerciseType.values[data['type'] as int],
      question: data['question'] as String?,
      options: List<String>.from(data['options'] as List? ?? []),
      correctOptionIndex: data['correctOptionIndex'] as int?,
      // 'userSelectedOptionIndex' is not fetched as it's not stored
      statement: data['statement'] as String?,
      isTrue: data['isTrue'] as bool?,
      sentenceParts: List<String>.from(data['sentenceParts'] as List? ?? []),
      correctOrder: List<int>.from(data['correctOrder'] as List? ?? []),
    );
  }
}
